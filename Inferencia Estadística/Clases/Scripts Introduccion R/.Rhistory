## Exponenciacion
8^(1/3)
## Absoluto
abs(5.7-6.8)/0.38
## Divisor y modulo (residuo)
119 %/% 13
119 %% 13
## Redondeo
floor(5.7)
ceiling(5.7)
## Funciones redondeos
rounded <- function(x) floor(x+0.5)
rounded = function(x) floor(x+0.5)
rounded <- function(x) {
floor(x+0.5)
}
rounded(5.1)
## Secuencias
1:7
seq(0,1,0.1)
seq(5,-5,-1)
seq(from=5,by= -1, along=1:20)
seq(by= -1, from=5, along=1:20)
a <- seq(1,10^6,by=100)
a = seq(1,10^6,by=100)
## Repeticiones
rep(5.3,17)
rep(1:6,2)
## Niveles
rep(1:6,rep(3,6))
debug(rep)
debug(rep)
debug(gl)
gl(6,3,18)
debug(gl)
gl(6,3,18)
{
f <- rep_len(rep.int(seq_len(n), rep.int(k, n)), length)
levels(f) <- as.character(labels)
class(f) <- c(if (ordered) "ordered", "factor")
f
}
rep(1:6,1:6)
rep(1:6,c(1,2,3,3,2,1))
rep(c("monoecious","dioecious","hermaphrodite","agamic"),c(3,2,7,3))
## Vectorizacion
y <- c(7,5,7,2,4,6,1,6,2,3)
y <- c(y,y)
sum((y-mean(y))^2)/(length(y)-1)
var(y)
data <- c(7,4,6,8,9,1,0,3,2,5,0)
ranks <- rank(data)
sorted <- sort(data)
ordered <- order(data)
data[ordered]
view <- data.frame(data,ranks,sorted,ordered)
view
data[ordered]
ordered <- order(data)
view <- data.frame(data,ranks,sorted,ordered)
view
## Uso de dataframes
worms <- read.csv("worms.csv",header=T,row.names=1)
View(worms)
View(worms)
?read.csv
## Uso de dataframes
worms <- read.csv("worms.csv",header=T,row.names=1)
attach(worms)
names(worms)
View(worms)
View(worms)
summary(worms)
?summary
## Subseleccion
worms[,1:3]
worms[5:15,]
worms[5:15,3:4]
worms[Area>3 & Slope <3 , ]
worms[2:11,][worms[1:10,][,"Slope"]< 3 & worms[1:10,][,"Area"] > 3,]
worms[2:11,][worms[1:10,]
worms[2:11,][worms[1:10,][,"Slope"] < 3
worms[2:11,][worms[1:10,][,"Slope"] < 3
worms[order(worms[,1]),c(1:6)]
worms[1:10,][,"Slope"]< 3
worms[1:10,][,"Area"] > 3
worms[2:11,][worms[1:10,][,"Slope"]< 3 & worms[1:10,][,"Area"] > 3,]
worms[1:10,][,"Slope"]< 3 & worms[1:10,][,"Area"] > 3
worms[2:11,][worms[1:10,][,"Slope"]< 3 & worms[1:10,][,"Area"] > 3,]
worms[order(worms[,1]),c(1:6)]
worms[order(worms[,1]), c("Area", "Slope", "Vegetation", "Soil.pH",  "Damp", "Worm.density")]
worms[rev(order(worms[,4])),c(4,6)]
## Uso de vectores y funciones
x <- 0:10
sum(x)
sum(x<5)
sum(x[x<5])
sum(x[x<5])
## Suma de los tres valores m?s grandes
y <- c(8,3,5,7,6,6,8,9,2,3,9,4,10,4,11)
sort(y)
rev(sort(y))
sum(rev(sort(y))[1:3])
## Indices
y <- c( 8, 3, 5, 7, 6, 6, 8, 9, 2, 3, 9, 4, 10, 4, 11 )
idx <- which(y>5)
y[y>5]
y[idx]
## Aritmetica logica
ys <- y[y<5]
## Muestreos
sample(y)
sample(y,replace=T)
sample(y,replace=T)
## Aritmetica logica
ys <- y[y<5]
ys
yb <- y[y>=5]
yb
## Localizacion de elementos
## Cuantos
sum(y > mean(y)+2 | y < mean(y)-2 )
## Localizacion de elementos
## Cuantos
sum(y > mean(y)+2 | y < mean(y)-2 )
## Suma
sum(y [y> mean(y)+2 | y < mean(y)-2] )
## Reemplazo de elementos
y <- c ( -8, 3, 5, 7, 6, 6, 8, 9, 2, 3, 9, 4, 10, 4, 11 )
for (i in 1:length(y)) {
if(y[i] < 0 )
y[i] <- 0
}
y[ y< 0 ] <- 0
y <- ifelse( y < 0 , -1, 1 )
y
rep(c("monoecious","dioecious","hermaphrodite","agamic"),c(3,2,7,3))
worms[order(worms[,1]),c(1:6)]
worms[rev(order(worms[,4])),c(4,6)]
## Uso de vectores y funciones
x <- 0:10
sum(x)
sum(x<5)
sum(x[x<5])
## Suma de los tres valores m?s grandes
y <- c(8,3,5,7,6,6,8,9,2,3,9,4,10,4,11)
sort(y)
rev(sort(y))
sum(rev(sort(y))[1:3])
## Indices
y <- c( 8, 3, 5, 7, 6, 6, 8, 9, 2, 3, 9, 4, 10, 4, 11 )
idx <- which(y>5)
idx
y[y>5]
y[idx]
## Muestreos
sample(y)
sample(y,replace=T)
## Aritmetica logica
ys <- y[y<5]
ys
yb <- y[y>=5]
yb
## Grafica de funciones
x <- 0:50
y <- 3*(1-exp(-0.1*x))
plot(x,y,type="l")
x <- seq(-5,5,.1)
y <- exp(.1+.4*x)/(1+exp(.1+.4*x))
plot(x,y,type="l",ylim=c(0,1))
## Otra funcion
y2 <- exp(.1+.6*x)/(1+exp(.1+.6*x))
lines(x,y2,lty=2)
y3 <- exp(.1+1.6*x)/(1+exp(.1+1.6*x))
lines(x,y3,lty=4)
## Matrices
y <- c( 8, 3, 5, 7, 6, 6, 8, 9, 2, 3, 9, 4, 10, 4, 11)
m <- matrix(y,nrow=5)
m
## Aritmetica matricial
## Matriz de fecundidades y sobrevivencia
L <- c(0,0.7,0,0,6,0,0.5,0,3,0,0,0.3,1,0,0,0)
L <- matrix(L,nrow=4)
L
E <- matrix(nrow=8,ncol=6,1)
E
n <- c(45,20,17,3)
n <- matrix(n,ncol=1)
n
L %*% n
## Solucion de sistemas de ecuaciones lineales
## 3x + 4y = 12
## x + 2y=8
A <- matrix(c(3,1,4,2),nrow=2)
A
kv <- matrix(c(12,8),nrow=2)
kv
solve(A,kv)
distribution <- data.frame(fx=fxp, fy=fyp)
## Uso para el calculo de estadisticas
fxp <- rnorm(33,15,4)
fyp <- rchisq(33, 7)
distribution <- data.frame(fx=fxp, fy=fyp)
distribution
fx
attach(distribution)
fx
